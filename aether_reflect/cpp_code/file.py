from cpp_code.struct import Struct


class File:
    def __init__(self,name):
        self.name=name
        self.structs=[]
        self.include_files=[]
        self.comment=""
        self.include_blocks=[]
    def set_comment(self,comment):
        self.comment=comment
    def add_struct(self,struct):
        self.structs.append(struct)
    def add_include_file(self,name):
        self.include_files.append(f'#include <{name}>')
    def add_include_file_relative(self,name):
        self.include_files.append(f'#include "{name}"')
    def add_include_block(self,block):
        self.include_blocks.append(block)
    def to_string(self):
        header=f"""// File: {self.name}
// Generated by Aether Reflect
        """
        comment_str=""
        for line in self.comment.splitlines():
            comment_str+=f"// {line}\n"
        
        include_str="#pragma once\n"
        for include in self.include_files:
            include_str+=f'{include}\n'
        for include_block in self.include_blocks:
            include_str+=f'{include_block}\n'
        struct_str=""
        for struct in self.structs:
            struct_str+=struct.to_string(4)
        reflect_str=""
        for struct in self.structs:
            reflect_str+=struct.create_reflect_code()
        return f"{header}\n{comment_str}\n{include_str}\n{struct_str}\n{reflect_str}\n"
    
    @staticmethod
    def from_obj(obj:dict):
        file=File(obj["filename"])
        file.set_comment(obj.get("comment",""))
        structs=obj.get("structs",[])
        for struct in structs:
            file.add_struct(Struct.from_obj(struct))
        for include in obj.get("includes","").splitlines():
            if include:
                file.add_include_block(include)
        return file